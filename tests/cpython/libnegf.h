#ifndef _NEGF_H
#define _NEGF_H

/**************************************************************************** 
 *
 *  C bindings for LibNEGF 
 *
 *  Generated by bind_fortran (DO NOT EDIT MANUALLY)
 *
 ****************************************************************************/


#define NEGF_SC  100
#define NEGF_MC  200
#define NEGF_LC  500
#define NEGF_HSIZE 4
#define NEGF_PADCHAR ' '


void negf_gethandlersize_(int *handlerSize);
/* integer, intent(out) :: handlerSize  */

void negf_init_session(int *handler);
/* integer, intent(out) :: handler(DAC_handlerSize)  */

void negf_get_version(int *handler);
/* integer, intent(inout) :: handler(DAC_handlerSize)  */

void negf_init(int *handler);
/* integer, intent(inout) :: handler(DAC_handlerSize)  */

void negf_set_h(int *handler, int *nrow, double *A, int *JA, int *IA);
/* integer, intent(inout) :: handler(DAC_handlerSize)
   integer, intent(out) :: nrow
   complex(dp), intent(out) :: A(*)
   integer, intent(out) :: JA(*)
   integer, intent(out) :: IA(*)  */

void negf_set_s(int *handler, int *nrow, double *A, int *JA, int *IA);
/* integer, intent(inout) :: handler(DAC_handlerSize)
   integer, intent(out) :: nrow
   complex(dp), intent(out) :: A(*)
   integer, intent(out) :: JA(*)
   integer, intent(out) :: IA(*)  */

void negf_set_s_id(int *handler, int *nrow);
/* integer, intent(inout) :: handler(DAC_handlerSize)
   integer, intent(out) :: nrow  */

void negf_print_mat(int *handler);
/* integer, intent(inout) :: handler(DAC_handlerSize)  */

void negf_read_input(int *handler);
/* integer, intent(inout) :: handler(DAC_handlerSize)  */

void negf_read_hs(int *handler, const char *real_path, const char *imag_path, 
    const int *target_matrix);
/* integer, intent(inout) :: handler(DAC_handlerSize)
   character(LST), intent(in) :: real_path
   character(LST), intent(in) :: imag_path
   integer, intent(in) :: target_matrix  */

void negf_destruct_session(const int *handler);
/* integer, intent(in) :: handler(DAC_handlerSize)  */

void negf_destruct_libnegf(const int *handler);
/* integer, intent(in) :: handler(DAC_handlerSize)  */

void negf_set_verbosity(const int *handler, const int *verbose_lev);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: verbose_lev  */

void negf_current(const int *handler, double *current, const char *unitOfH, 
    const char *unitOfJ);
/* integer, intent(in) :: handler(DAC_handlerSize)
   real(dp), intent(inout) :: current
   character(SST), intent(in) :: unitOfH
   character(SST), intent(in) :: unitOfJ  */

void negf_density_efa(const int *handler, const int *ndofs, double *density, 
    const int *particle);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: ndofs
   real(dp), intent(out) :: density(ndofs)
   integer, intent(in) :: particle  */

void negf_density_dft(const int *handler, const int *ndofs, const double 
    *density);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: ndofs
   real(dp), intent(in) :: density(ndofs)  */

void negf_set_iteration(const int *handler, const int *iter);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: iter  */

void negf_set_output(const int *handler, const char *out_path);
/* integer, intent(in) :: handler(DAC_handlerSize)
   character(LST), intent(in) :: out_path(1)  */

void negf_set_scratch(const int *handler, const char *scratch_path);
/* integer, intent(in) :: handler(DAC_handlerSize)
   character(LST), intent(in) :: scratch_path(1)  */

void negf_set_outer(const int *handler, const int *outer);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: outer  */

void negf_set_kpoint(const int *handler, const int *kpoint);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: kpoint  */

void negf_set_reference(const int *handler, const int *minmax);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: minmax  */

void negf_set_writetunn(const int *handler, const int *flag);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: flag  */

void negf_set_writeldos(const int *handler, const int *flag);
/* integer, intent(in) :: handler(DAC_handlerSize)
   integer, intent(in) :: flag  */

void negf_write_partition(const int *handler);
/* integer, intent(in) :: handler(DAC_handlerSize)  */

#endif

